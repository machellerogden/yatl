#!/usr/bin/env node
const{readFileSync}=require("fs"),{inspect}=require("util"),read=process.env.YATL_JSON?JSON.parse:require("./read.min"),write=JSON.stringify,slurp=a=>readFileSync(a,"utf8"),print=a=>console.log(a),pprint=a=>console.log(inspect(a,{depth:null,colors:!0})),env={"+":(...a)=>a.reduce((c,a)=>c+a),"-":(...a)=>a.reduce((c,a)=>c-a),"*":(...a)=>a.reduce((c,a)=>c*a),"/":(...a)=>a.reduce((c,a)=>c/a),"=":(c,a)=>c==a,"==":(c,a)=>c===a,"<":(c,a)=>c<a,">":(c,a)=>c>a,">=":(c,a)=>c>=a,"<=":(c,a)=>c<=a,"%":(c,a)=>c%a,throw:a=>{throw a},print,pprint,read,slurp,load:a=>evaluate(read(slurp(a)),env),js:global};function resolve(b,c,d){if(d)return c=Object.create(c),b.some((e,a)=>"&"===e?c[b[a+1]]=d.slice(a):(c[e]=d[a],0)),c;if(Array.isArray(b))return b.map((...b)=>evaluate(b[0],c));if("string"!=typeof b)return b;if("nil"!==b){if(/^".*"$/.test(b))return b.slice(1,-1);if(b in c)return c[b];if(b.includes("/")){const[a,d]=b.split("/");return resolve(d,c[a])}c.throw(new Error(`${b} is undefined`))}}function macroexpand(a,b){for(;Array.isArray(a)&&a[0]in b&&b[a[0]].$macro;)a=b[a[0]](...a.slice(1));return a}function evaluate(a,b){for(;;){if(!Array.isArray(a))return resolve(a,b);if(a=macroexpand(a,b),!Array.isArray(a))return resolve(a,b);if("def"===a[0])return b[a[1]]=evaluate(a[2],b);if("~"===a[0]){const c=evaluate(a[1],b);return c.$macro=1,c}if("`"===a[0])return a[1];if(".-"===a[0]){const c=resolve(a.slice(1),b),[d,e]=c;return 2 in c?d[e]=c[2]:d[e]}if("."===a[0]){let c=resolve(a.slice(2),b);return c[0][a[1]].apply(c[0],c.slice(1))}if("try"===a[0])try{return evaluate(a[1],b)}catch(c){return evaluate(a[2][2],resolve([a[2][1]],b,[c]))}if("fn"===a[0]){const c=a[1],d=a[2],e=(...a)=>evaluate(d,resolve(c,b,a));return e.$attributes={params:c,body:d,scope:b},e}if("let"===a[0]){b=a[1].reduce((a,b,c,d)=>(c%2&&(a[d[c-1]]=evaluate(b,a)),a),Object.create(b)),a=a[2];continue}if("if"===a[0]){a=evaluate(a[1],b)?a[2]:a[3];continue}if("do"===a[0]){resolve(a.slice(1,-1),b),a=a[a.length-1];continue}const[c,...d]=resolve(a,b);if(c.$attributes){a=c.$attributes.body,b=resolve(c.$attributes.params,c.$attributes.scope,d);continue}return c(...d)}}require.main===module&&(process.argv[2]?env.load(process.argv[2]):require("repl").start({eval:(a,b,c,d)=>d(null,evaluate(read(a),env)),writer:write}));
